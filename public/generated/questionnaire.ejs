<head>
    <%include head.ejs %>
</head>
<body>
<div class="hidden" id="notificationContainer">
    <div class="row" style="margin-left: 0 !important;">
        <div id="notificationImageContainer">
            <img src="../images/badges/badge_honesty@3x.png" alt="" id="notificationImage">
        </div>
        <div id="notificationTitleContainer">
            <h4 id="notificationTitle">Test</h4>
        </div>
    </div>

    <div id="notificationBodyContainer">
        <p id="notificationBody"></p>
    </div>
</div>
<div class="container" id="pageContainer">
        <script>
            var questionnaires = <%- JSON.stringify(items) %>;
            var players = <%- JSON.stringify(players) %>;

            function createNotification(imageSource, title, body) {
                console.log("Clicked createNotification with " + title);

                $('#notificationImage').attr('src', imageSource);
                $('#notificationTitle').html(title);
                $('#notificationBody').text(body);

                displayNotification();
                setTimeout(displayNotification, 3000);

            }
            function displayNotification() {
                console.log("reached displayNotification");
                $('#notificationContainer').toggleClass('hidden');
            }

            function displayPointsIncrease() {
                $('#accountContainer').attr('style', 'background-color: #99ff33');
                setTimeout(fadeOutGreen, 1000);
                console.log("displaying color green for accountContainer");

            }

            function fadeOutGreen() {
                $('#accountContainer').attr('style', 'background-color: none');
            }
        </script>


    <div id="app">

    </div>

    <div class="container" id="appContainer">
        <noscript>
            This Questionnaire requires Javascript to work. Please activate Javascript in your browser.
        </noscript>
    </div>

    <% include footer.ejs %>
    <!-- Footer -->
</div>


<script type="text/jsx">

    let loadedData = questionnaires[1];
    let badges = [
        {
            "id": 0,
            "position": -1,
            "title": "Empty",
            "text": "Lorem Ipsum dolor sit",
            "image": "../images/badges/badge_empty.png",
        },
        {
            "id": 1,
            "position": 0,
            "title": "Los geht's",
            "text": "Tutorial beendet.",
            "image": "../images/badges/badge_start@3x.png",
        },
        {
            "id": 2,
            "position": 1,
            "title": "Weiße Weste",
            "text": "Du hast dein Einkommen korrekt versteuert. Weiter so!",
            "image": "../images/badges/badge_honesty@3x.png",
        },
        {
            "id": 3,
            "position": 1,
            "title": "Unbemerkt",
            "text": "Du hast durch gerissenes Vorgehen Steuern gespart. Riskant!",
            "image": "../images/badges/badge_evasion@3x.png",
        },
        {
            "id": 4,
            "position": 2,
            "title": "Top-Verdiener/in",
            "text": "Du gehörst zu den 10% der Teilnehmer/innen, die am meisten EcoBucks verdient haben!",
            "image": "../images/badges/badge_money@3x.png",
        },
        {
            "id": 5,
            "position": 3,
            "title": "Finale",
            "text": "Du hast den Fragebogen erfolgreich beendet!",
            "image": "../images/badges/badge_completion@3x.png",
        },
    ];

    class Game extends React.Component {
        /*
        States:
        gameScore (Int): Keeps track of the game score

        Properties:
        data (JSON): Import of the data JSON file.

         */
        constructor(props) {
            super(props);
            /*
            This part sets up the game. it selects a random mode.
             */
            let data = this.props.data;
            let modes = data.modes;
            console.log(modes);
            let mode = "noFit"; //modes[Math.floor(Math.random() * modes.length)]; //selects a random mode.


            var badgeArray = [];
            for (let i = 0; i < 4; i++) {
                let emptyBadge = this.props.badges[0];
                badgeArray.push(emptyBadge);
            }
            this.state = {
                gameScore: 100,
                mostRecentScore: 0,
                mode: mode.valueOf(),
                badgeArray: badgeArray,
                currentFlag: null,
                itemsAreActive: true,
                timer: 0
            };

            console.log(this.state.mode);


            this.increaseScore = this.increaseScore.bind(this);
            this.decreaseScore = this.decreaseScore.bind(this);
            this.handleAudit = this.handleAudit.bind(this);
            this.changeFlagDisplay = this.changeFlagDisplay.bind(this);
            this.activateBadge = this.activateBadge.bind(this);
            this.setTimer = this.setTimer.bind(this);
            this.notifyEnd = this.notifyEnd.bind(this);
        }

        changeFlagDisplay(flagData) {
            let flagDataJSON = JSON.parse(flagData);
            let imageURL = flagDataJSON.flag;
            console.log("Reached changeFlagDisplay in G with: " + imageURL.valueOf());

            this.setState({currentFlag: imageURL});
        }

        setTimer(time) {
            this.setState({
                timer: 0,
                itemsAreActive: true
            });
            if (time > 0) {
                console.log("Resetting timer with " + time);

                this.setState({
                    timer: time.valueOf()
                });
            }
        }

        notifyEnd() {
            this.setState({itemsAreActive: false});
        }

        increaseScore(number) {
            displayPointsIncrease();
            console.log("called increaseGS from Questionnaire!");
            this.setState({mostRecentScore: number.valueOf()});
            let currentScore = this.state.gameScore;
            let newScore = currentScore.valueOf() + number.valueOf();
            this.setState({gameScore: newScore.valueOf()});
        }

        decreaseScore(number) {
            console.log("Decreasing Score by " + number);
            let currentScore = this.state.gameScore;
            var newScore = currentScore.valueOf() - number.valueOf();
            newScore = newScore < 0 ? 0 : newScore;
            this.setState({gameScore: newScore.valueOf()});
        }

        handleAudit(isAudited, number) {
            let currentScore = this.state.mostRecentScore;
            if (isAudited) {
                if (number.valueOf() < currentScore) {
                    let correctAmount = this.state.mostRecentScore * 0.2;
                    let penalty = abs((correctAmount - number) + correctAmount);
                    alert("Bei der Steuerprüfung wurde festgestellt, dass Du deine Verdienste falsch angegeben hast. Es wurde dir eine Strafe von " + penalty + "§ erteilt.");
                    this.decreaseScore(penalty);
                }
                else {
                    alert("Bei der Steuerprüfung wurden keine Verstöße festgestellt. Es werden regelgemäß 20% des angegbebenen Betrags abgezogen.");
                    let taxAmount = number * 0.2;
                    this.decreaseScore(taxAmount);
                }
            }
            else {
                alert("Du wurdest nicht geprüft. Es werden regelgemäß 20% des angegebenen Betrags abgezogen.");
                let taxAmount = number * 0.2;
                this.decreaseScore(taxAmount);
            }
            this.setState({mostRecentScore: 0}); //reset most recent score.

        }

        activateBadge(number) {
            if (number < this.props.badges.length) { //safety check
                let badgeToAdd = this.props.badges[number];
                console.log("trying to activate badge with notification: " + badgeToAdd.title);
                createNotification(badgeToAdd.image, badgeToAdd.title, badgeToAdd.text);

                var currentBadgeArray = this.state.badgeArray;
                currentBadgeArray[badgeToAdd.position] = badgeToAdd;
                this.setState({badgeArray: currentBadgeArray});
            }
        }

        static handleSubmit(data) {
            console.log("reached Game's handleSubmit with " + data.valueOf());
            let request = new XMLHttpRequest();
            request.open('POST', 'localhost:3000/test', true);
            request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
            request.send(data);
        }

        render() {
            var timerContainer = this.state.timer > 0 ? <div id="flagContainer"> <Timer time={this.state.timer} notifyEnd={this.notifyEnd}/> </div> : ""
            let badgeArray = this.state.badgeArray;
            return (
                <div>
                    <Header gameScore={this.state.gameScore} badgeArray={badgeArray}/>
                    {timerContainer}
                    <div className="appContainer">
                        <div className="row questionnaireContainer">
                            <Questionnaire increaseScore={this.increaseScore}
                                           handleAudit={this.handleAudit}
                                           handleSubmit={Game.handleSubmit}
                                           notifyFlagDisplay={this.changeFlagDisplay}
                                           activateBadge={this.activateBadge}
                                           setTimer={this.setTimer}
                                           gameScore={this.state.gameScore}
                                           mostRecentScore={this.state.mostRecentScore}
                                           data={this.props.data}
                                           playerData={this.props.playerData}
                                           mode={this.state.mode}
                                           itemsAreActive={this.state.itemsAreActive}
                            />
                        </div>
                    </div>
                </div>
            );
        }
    }

    class Header extends React.Component {
        constructor(props) {
            super(props);
        }

        render() {
            return (
                <nav className="navbar navbar-light bg-light" id="header">

                    <div id="logoContainer">
                        <img src="../images/uni_Logo_2016.jpg" id="headerLogo" alt=""/>
                    </div>
                    <div id="badgeContainer">
                        <BadgeContainer badgeArray={this.props.badgeArray}/>
                    </div>
                    <div id="accountContainer">
                        <p>Dein derzeiter Kontostand: </p>
                        <p id="accountBalance">{this.props.gameScore} §</p>
                    </div>
                </nav>
            );
        }
    }

    class BadgeContainer extends React.Component {
        constructor(props) {
            super(props);
        }

        addBadge(id, position) {
            for (let item in this.props.badges) {

            }
        }

        render() {
            let renderBadges = this.props.badgeArray.map((badge, number) =>
                <Badge title={badge.title} image={badge.image} key={number}/>
            );

            return (
                <div>
                    <p>Deine Badges: </p>
                    <div className="row badgeRow">
                        {renderBadges}
                    </div>
                </div>


            );
        }
    }

    class Badge extends React.Component {
        constructor(props) {
            super(props);
        }

        render() {
            return (
                <div className="badgeContainer">
                    <img src={this.props.image} alt={this.props.title} className="badgeImage"/>
                </div>
            );
        }
    }

    class Timer extends React.Component {
        constructor(props) {
            super(props);
            let time = this.props.time;
            console.log("constructing with " + this.props.time);
            this.state = {
                time: time,
                isUpdated: false,
                interval: null
            };
            this.tick = this.tick.bind(this);
        }

        componentDidMount() {
            var interval = setInterval(this.tick, 1000);
            this.setState({
                time: this.props.time,
                interval: interval});
        }

        componentDidUpdate() {
            console.log("current Time: " + this.state.time + " prop time " + this.props.time);
            if (this.state.isUpdated) {
                console.log("trying to update timer with " + this.props.time);
                this.setState({
                    isUpdated: false,
                    time: this.props.time
                });
            }
        }

        componentWillReceiveProps() {
            console.log("Timer received props: " + this.props.time);
            this.setState({isUpdated: true});
        }

        componentWillUnmount() {
            console.log("Timer unmounted");
            clearInterval(this.state.interval);
        }

        tick() {
            if (this.state.time > 0) {
                let newTime = this.state.time - 1;
                this.setState({time: newTime.valueOf()});
            }
            else {
                this.props.notifyEnd();
                clearInterval(this.state.interval);
            }
        }

        render() {
            return (
                <div>
                    <div> Current Time: </div>
                    <div className="timerContainer"> {this.state.time} </div>
                </div>
            )
        }
    }

    class Questionnaire extends React.Component {
        /*
        Properties:
            mode (String): "noFlag", "noFit", "flagFit" for different modes (randomly selected in Game).
                           - "noFlag": No flag priming
                           - "noFit": A randomly selected flag is used for priming
                           - "flagFit": The flag of the user's nationality is used for priming.
        Methods:
            increaseScore(number): from Game
            handleAudit(isAudited, number): from Game
            handleSubmit():
            handleButtonClick():
            handleAudit():

         */
        constructor(props) {
            super(props);

            this.state = {
                itemblockdata: this.props.data,
                currentBlockIndex: 0,
                isInProgress: true,
                itemBlockResults: null
            };

            this.handleButtonClick = this.handleButtonClick.bind(this);
            this.handleAudit = this.handleAudit.bind(this);
            // this.notifyChanges = this.notifyChanges.bind(this);
            this.activateBadge = this.activateBadge.bind(this);
            this.buildResults = this.buildResults.bind(this);

            console.log("we have " + this.state.itemblockdata.itemBlocks.length + " itemblocks here");
        }

        componentDidMount() {
            let currentTimer = this.state.itemblockdata.itemBlocks[this.state.currentBlockIndex].timer;
            this.props.setTimer(currentTimer);
        }

        handleSubmit(data) {
            this.props.handleSubmit(data);
        }

        handleButtonClick(calculatedScore) {
            let newNumber = this.state.currentBlockIndex + 1;
            if (newNumber < this.state.itemblockdata.itemBlocks.length) {
                console.log("new ")
                this.setState({currentBlockIndex: newNumber.valueOf()});
            }
            else {
                let questionnaireData = {
                    "name" : "Questionnaire",
                    "content": this.state.itemBlockResults
                }

                alert("Reached end of questionnaire with " + JSON.stringify(questionnaireData));
                Game.handleSubmit(questionnaireData);

            }

            //reset the timer if necessary
            let newTimer = this.state.itemblockdata.itemBlocks[newNumber].timer.valueOf();
            this.props.setTimer(newTimer);
            //Here we call Game's increaseScore
            if (calculatedScore > 0) {
                this.props.increaseScore(calculatedScore);
            }

            //lastly, we add our itemblock result Data to the questionnaire Data Block
            this.buildResults(data);
        }

        buildResults(mydata) {
            console.log("reached Q's buildResults with " + JSON.stringify(mydata));
            var currentQResults = this.state.itemBlockResults;

            if (currentQResults) {
                currentQResults.push(mydata);
            }
            else {
                currentQResults = [];
                currentQResults.push(mydata);
            }
            this.setState({itemBlockResults: currentQResults});
        }

        handleAudit(isAudited, number) {
            /*
            Passes the declared number through to game
             */
            console.log("Reached Questionnaire's handleAudit with :" + isAudited.valueOf() + ", " + number);
            this.props.handleAudit(isAudited, number)
        }

        activateBadge(number) {
            this.props.activateBadge(number);
        }

        render() {
            let blocks = this.state.itemblockdata.itemBlocks.map((itemBlock, number) => {
                    if (itemBlock.role === "audit") {
                        return <AuditBlock blockID={itemBlock.iblock}
                                           title={itemBlock.title}
                                           role={itemBlock.role}
                                           explanationText={itemBlock.explanationText}
                                           image={itemBlock.image}
                                           mostRecentScore={this.props.mostRecentScore}
                                           handleAudit={this.handleAudit}
                                           handleButtonClick={this.handleButtonClick}
                                           key={number}
                        />;
                    }
                    else if (itemBlock.role === "leaderboard") {
                        return <Leaderboard blockID={itemBlock.iblock}
                                            title={itemBlock.title}
                                            role={itemBlock.role}
                                            explanationText={itemBlock.explanationText}
                                            image={itemBlock.image}
                                            handleButtonClick={this.handleButtonClick}
                                            key={number}

                                    data={this.props.playerData}/>
                    }
                    else {
                        return <ItemBlock blockID={itemBlock.iblock}
                                          title={itemBlock.title}
                                          role={itemBlock.role}
                                          flagData="null"
                                          explanationText={itemBlock.explanationText}
                                          image={itemBlock.image}
                                          gameScore={this.props.gameScore}
                                          maximumValue={itemBlock.maximumValue}
                                          timer={itemBlock.timer}
                                          questions={itemBlock.questions}
                                          reward={itemBlock.reward}
                                          key={number}
                                          itemsAreActive={this.props.itemsAreActive}
                                          handleButtonClick={this.handleButtonClick}
                                          buildResults={this.buildResults}
                                          notifyChanges={this.notifyChanges}
                                          activateBadge={this.activateBadge}

                        />;
                    }
                }
            );

            var block = blocks[this.state.currentBlockIndex];

            let submitButton = this.state.isInProgress ? "" :
                <input type="submit" className="btn" onClick={this.handleSubmit}/>;

            return (
                <form className="itemBlockForm">
                    {block}

                    {submitButton}
                </form>
            );
        }
    }

    class ItemBlock extends React.Component {
        /*
        Properties:
            blockID (Int): Identifying number of the Item Block. Incremeting by one, starting with 101 (to avoid confusion with question IDs).
            title (String): Title of the Item Block, displayed above the image
            image (String): URL for the image to be displayed, "null" for no image.
            explanationText (String): Explanation text of the item block. Should give instructions to the user for the following items
            questions (Array(JSON)): Array of questions of the itemBlock. Includes id, name, type, content, items (dependent on question type).
            maximumPoints(Int): The maximum amount of points that can be earned in the Item Block. Depends on performance of tasks. 0 if no points can be earned in the Item Block.


        Methods:
        handleButtonClick (from Questionnaire): Activates handleButtonClick in Questionnaire.
         */
        constructor(props) {
            super(props);
            var valueMap = new Map([]);
            var array = [];
            for (let question in this.props.questions) {
                array.push(true);
            }
            this.state = {
                score: 0,
                valueMap: valueMap,
                itemValidityArray: array,
                itemsAreValid: true,
                itemResults: null
            };
            this.calculatePoints = this.calculatePoints.bind(this);
            this.calculateRewards = this.calculateRewards.bind(this);
            this.increaseScore = this.increaseScore.bind(this);
            this.notifyChanges = this.notifyChanges.bind(this);
            this.updateValidity = this.updateValidity.bind(this);
            this.buildResults = this.buildResults.bind(this);
        }

        componentWillUnmount() {
            console.log("IB " + this.props.blockID + " will unmount");

            let iBlockResults = {
                "blockID" : this.props.blockID,
                "content": this.state.itemResults
            }

            this.props.buildResults(iBlockResults);
        }

        increaseScore(id, number) {
            let currentScore = this.state.score + number.valueOf();

            var map = this.state.valueMap;
            map.set(id, number);
            this.setState({valueMap: map})
        }


        calculatePoints() {
            let calculatedScore = 0;
            if (this.state.valueMap.size > 0) {
                this.state.valueMap.forEach((value, key) =>
                    calculatedScore += value);
            }

            this.calculateRewards(calculatedScore);

            if (this.state.itemsAreValid) {
                this.props.handleButtonClick(calculatedScore);
            }
            else {
                alert("Bitte gib gültige Werte in alle Textfelder ein!");
            }
        }

        calculateRewards(calculatedScore) {
            let rewards = this.props.reward;

            for (let i = 0; i < rewards.length; i++) {
                let reward = rewards[i];
                var condition = true;
                let conditionJSON = reward.condition;
                if (conditionJSON.variable === "all") {
                    condition = true;
                }
                else if (conditionJSON.variable === "gameScore") {
                    let variable = this.props.gameScore;
                    let op = {
                        "<": function(a, b) { return a < b },
                        "=": function(a, b) { return a == b },
                        ">": function(a, b) { return a > b }
                    };

                    let value = JSON.parse(conditionJSON.value);
                    condition = op[conditionJSON.operator](variable, value);
                }
                console.log("trying to unpack " + reward.type);
                if (reward.condition) {
                    if (reward.type === "ecobucks") {
                        console.log("Here we get an Ecobucks reward of " + reward.number);
                        calculatedScore += reward.number;
                    }
                    else if (reward.type === "badge") {
                        console.log("here we get badge number " + reward.number);
                        if (reward.condition) {
                            this.props.activateBadge(reward.number);
                        }
                    }
                }
            }
        }

        notifyChanges(id) {
            console.log("Reached notifyChanges in IB " + id);
            this.props.notifyChanges(id);
        }

        updateValidity(number, itemIsValid) {
            var array = this.state.itemValidityArray;
            array[number] = itemIsValid;
            this.setState({itemValidityArray: array});
            var bool = true;
            for (let i = 0; i < this.state.itemValidityArray.length; i++) {
                if (!this.state.itemValidityArray[i]) {
                    bool = false;
                }
            }
            this.setState({itemsAreValid: bool});
        }

        buildResults(data) {
            console.log("Reached IB's buildResults with " + JSON.stringify(data))
            var currentIBResults = this.state.itemResults;
            if (currentIBResults) {
                console.log("existing array")
                currentIBResults.push(data);
            }
            else {
                currentIBResults = [];
                currentIBResults.push(data);
            }

            this.setState({itemResults: currentIBResults});
        }

        sendResults() {
            return {
                "blockID": this.props.blockID,
                "content": this.state.itemResults
            }
        }

        render() {
            let questions = this.props.questions.map((question, number) => {
                    if (question.qtype === "TextItem") {
                        return <TextItem id={question.id}
                                         name={question.qname}
                                         questionContent={question.content}
                                         inputType={question.input}
                                         updateValidity={this.updateValidity}
                                         buildResults={this.buildResults}
                                         number={number}
                                         key={number}/>;
                    }
                    else if (question.qtype === "DropdownItem") {
                        return <DropdownItem id={question.id}
                                             name={question.qname}
                                             questionContent={question.content}
                                             items={question.items}
                                             notifyChanges={this.notifyChanges}
                                             key={number}/>;
                    }
                    else if (question.qtype === "SliderItem") {
                        return <SliderItem id={question.id}
                                           name={question.qname}
                                           questionContent={question.content}
                                           sliderGoal={question.sliderGoal}
                                           active = {this.props.itemsAreActive}
                                           increaseScore={this.increaseScore}
                                           key={number}/>
                    }
                    else if (question.qtype === "RadioItem") {
                        return <RadioItem id={question.id}
                                          name={question.qname}
                                          questionContent={question.content}
                                          items={question.items}
                                          updateValidity={this.updateValidity}
                                          number={number}
                                          key={number}/>;
                    }
                }
            );

            return (
                <div>
                    <div className="itemBlockIntro">
                        <h1>{this.props.title}</h1>
                        {this.props.image === "null" ? "" : <img className="itemBlockImage" src={this.props.image}/>}
                        <p>{this.props.explanationText} </p>
                    </div>

                    <div>
                        {questions}
                    </div>
                    <button className="btn continueButton" onClick={this.calculatePoints}
                            disabled={!this.state.itemsAreValid}>Weiter
                    </button>
                </div>


            );
        }

    }

    class AuditBlock extends React.Component {
        /*
        Explanation:
            AuditBlocks are similar to itemBlocks, but they contain logic for the "tax audit portion" of the Questionnaire.
            Unlike item blocks however, they contain a fixed set of items: One TextItem in which the user self-reports their
            earnings, and a number of AuditItems that represent the chance of getting audited.

        Properties:
            blockID (Int): Identifying number of theAuditBlock. Incremeting by one, starting with 101 (to avoid confusion with question IDs).
            title (String): Title of the AuditBlock, displayed above the image
            image (String): URL for the image to be displayed, "null" for no image.
            explanationText (String): Explanation text of the AuditBlock. Should give instructions to the user.
            probability (Double): Probability

        Methods:

         */

        constructor(props) {
            super(props);

            this.state = {
                number: 0,
                auditIsComplete: false,
                feedback: ""
            };

            this.handleAudit = this.handleAudit.bind(this);
            this.handleTextInput = this.handleTextInput.bind(this);
            this.handleContinue = this.handleContinue.bind(this);
            this.validateInput = this.validateInput.bind(this);

        }

        handleTextInput(event) {
            this.validateInput(event);
            let value = event.target.value;
            this.setState({number: value.valueOf()})
        }

        handleAudit(isAudited) {
            /*
            This should fetch the number submitted and pass it upward to Questionnaire.
             */
            let number = this.state.number;
            console.log("reached AuditBlock's handleAudit with " + number);

            if (number === 0) {
                alert("Dein Kontostand kann nicht 0 sein! Hast du vergessen, einen Betrag anzugeben?")
            }
            else {
                this.props.handleAudit(isAudited, number);
                this.setState({auditIsComplete: true});
            }

        }

        validateInput(event) {
            var reg = /^\d+$/;
            let input = event.target.value;
            if (reg.test(input)) {
                console.log("Input " + input.valueOf() + " good");
                // this.props.updateValidity(this.props.number, true);
                this.setState({input: input.valueOf()});
            }
            else {
                console.log("Input " + input.valueOf() + " bad");
                this.setState({feedback: "Bitte nur ganze Zahlen eingeben!"})
                this.setState({auditIsComplete: false});
            }
        }

        handleContinue() {

            this.props.handleButtonClick();
        }

        render() {
            var auditItems = [];

            for (let i = 0; i < 10; i++) {
                let auditItem = <AuditItem probability="0.1" isActive={!this.state.auditIsComplete} id={i} name={i} key={i} handleAudit={this.handleAudit}/>;
                auditItems.push(auditItem);
            }
            return (
                <div>
                    <div className="itemBlockIntro">
                        <h1>{this.props.title}</h1>
                        {this.props.image === "null" ? "" : <img className="itemBlockImage" src={this.props.image}/>}
                        <p>{this.props.explanationText} </p>
                    </div>
                    <div id="tableContainer">
                        <table>
                            <tbody>
                            <tr>
                                <th>Name</th>
                                <th>Betag</th>
                            </tr>
                            <tr>
                                <td>Zuletzt erspielt: </td>
                                <td> {this.props.mostRecentScore} </td>
                            </tr>
                            <tr>
                                <td>20% davon: </td>
                                <td>{this.props.mostRecentScore * 0.2}</td>
                            </tr>
                            </tbody>

                        </table>
                    </div>


                    <div>
                        <label htmlFor="auditTextEntry">Betrag: </label>
                        <input type="text" id="auditTextEntry" onChange={this.handleTextInput} disabled={this.state.auditIsComplete}/>
                        {this.state.feedback}
                    </div>
                    <div className="row auditItemContainer">
                        {auditItems}
                    </div>
                    <button className="btn continueButton" onClick={this.handleContinue}
                            disabled={!this.state.auditIsComplete}>Weiter
                    </button>
                </div>
            );
        }
    }

    class Leaderboard extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                itemsAreValid: true
            }
        }

        calculatePoints() {

        }

        createNotification(imageSource, title, body) {
            console.log("Clicked createNotification with " + title);
            $('#notificationContainer').toggleClass("hidden");
        }

        render() {
            let playerItems = [];

            this.props.data.map((player, number) => {
                console.log("trying to unpack " + player.username);
                let playerHTML = <li key={number}> {player.username} | {player.score} | {player.date} </li>;
                playerItems.push(playerHTML);
            });

            return(
                <div>
                    <div onClick={() => createNotification("Hey", "#", "This is a Test")}> Click me </div>
                    <div className="itemBlockIntro">
                        <h1>{this.props.title}</h1>
                        {this.props.image === "null" ? "" : <img className="itemBlockImage" src={this.props.image}/>}
                        <p>{this.props.explanationText} </p>
                    </div>

                    <div>
                        {playerItems}
                    </div>
                    <button className="btn continueButton"
                            disabled={!this.state.itemsAreValid}>Weiter
                    </button>
                </div>
            );
        }
    }

    class RadioItem extends React.Component {
        /*
       Properties:
       id (Int): Identifying number of the question
       name (String): Name property

       questionContent (String): Text of the question
       items (Array): Items for for radio items, lowest to highest.
        */
        constructor(props) {
            super(props);

            this.state = {
                input: ""
            }
            this.validateInput = this.validateInput.bind(this);
            this.reportInput = this.reportInput.bind(this);
        }

        componentDidMount() {
            this.props.updateValidity(this.props.number, false);
        }

        reportInput() {
            this.props.reportInput;
        }

        validateInput(event) {
            if (event.target.accessKey === "correct") {
                let input = event.target.value;
                this.props.updateValidity(this.props.number, true);
                this.setState({input: input.valueOf()});
            }
            else if (event.target.accessKey === "false") {
                this.props.updateValidity(this.props.number, false);
            }
        }

        buttonStyle = {
            marginRight: 5
        };

        render() {
            let items = this.props.items.map((item, number) =>
                <div key={number} className="radioItem">
                    <input type="radio" accessKey={item.value} value={number} name={this.props.name}
                           style={this.buttonStyle} onChange={this.validateInput}/>
                    <label htmlFor={number}> {item.content} </label>
                </div>
            );

            let containerHorizontal = <div id="radioItemContainer"
                                           className="verticalRadioItemContainer row"> {items} </div>;
            let containerVertical = <div id="radioItemContainer" className="horizontalRadioItemContainer"> {items} </div>

            return (
                <div className="itemContainer radio" id={this.props.id}>
                    <label>{this.props.questionContent}
                        {items.length < 5 ? containerHorizontal : containerVertical}
                    </label>
                </div>
            );

        }


    }

    class SliderItem extends React.Component {
        /*
        Properties:
            id (Int): ID number of the item
            name (String): name property

            questionContent (String) : Text of the question
            sliderGoal (Int) : Goal to which the slider is set
         */
        constructor(props) {
            super(props);
            this.state = {
                proximity: 0,
                testMode: false,
                input: 0
            };
            this.handleChange = this.handleChange.bind(this);
            this.reportInput = this.reportInput.bind(this);
        }

        reportInput() {
            this.props.reportInput;
        }

        handleChange(event) {
            let sliderInput = event.target.value;
            let id = event.target.id;

            let accuracy = Math.abs(sliderInput - this.props.sliderGoal);
            var result = 200 - (accuracy * 20);
            if (result < 0) {
                result = 0;
            }
            this.setState({input: sliderInput});
            this.props.increaseScore(id, result.valueOf());
        }

        render() {
            var testFeedback = this.state.input === 0 ? "" : this.state.input;

            return (
                <div className="itemContainer slider">
                    <label>
                        {this.props.questionContent}
                    </label>
                    <br/>
                    <div className="sliderContainer">
                        <input className="sliderItem" type="range" min="0" max="100" name={this.props.name} id={this.props.id}
                               onMouseUp={this.handleChange} disabled={!this.props.active}/>
                        <div className="sliderFeedback">
                            {testFeedback}
                        </div>
                    </div>

                </div>
            )
        }
    }

    class TextItem extends React.Component {
        /*
        Properties:
        questionContent(String): Text of the question
        id (Int): Identifying number

        name: Name of the item (needed for posting it to server).
         */
        constructor(props) {
            super(props);

            this.state = {
                feedback: "",
                input: "",
                resultData: null
            };

            this.validateInput = this.validateInput.bind(this);
            this.reportInput = this.reportInput.bind(this);
        }

        componentDidMount() {
            this.props.updateValidity(this.props.number, false);
        }

        componentWillUnmount() {
            if (this.state.resultData !== null) {
                console.log("Item will unmount: " + this.props.id);
                // this.props.buildResults(this.state.resultData);
            }

        }

        reportInput() {
            this.props.reportInput();
        }

        validateInput(event) {
            let input = event.target.value;
            var inputIsValid = true;
            if (this.props.inputType === "number") {
                var reg = /^\d+$/;
                inputIsValid = reg.test(input);
                if (inputIsValid) {
                    console.log("Input " + input.valueOf() + " good");
                    this.props.updateValidity(this.props.number, true);
                    this.setState({input: input.valueOf()});
                }
                else {
                    console.log("Input " + input.valueOf() + " bad");
                    this.setState({feedback: "Bitte nur ganze Zahlen eingeben!"})
                    this.props.updateValidity(this.props.number, false);
                }
            }
            else if (input !== "") {
                this.props.updateValidity(this.props.number, true);
                this.setState({input: input.valueOf()});
            }

            if (inputIsValid) {
                this.buildResultsData(input);
            }
        }

        buildResultsData(input) {
            let resultsJSON = {
                "itemID": this.props.id,
                "itemType": "TextItem",
                "result": input.valueOf()
            }
            console.log("reached item's buildResultsData with " + JSON.stringify(resultsJSON));
            this.setState({resultData: resultsJSON});
            this.props.buildResults(resultsJSON);
        }

        render() {
            return (
                <div className="itemContainer text" id={this.props.id} key={this.props.id}>
                    <label>
                        {this.props.questionContent}
                    </label>
                    <br/>
                    <input type="text" name={this.props.name} onBlur={this.validateInput}/>
                    <span id="feedback">{this.state.feedback}</span>
                </div>
            );
        }

    }

    class DropdownItem extends React.Component {
        /*
        Properties:
        id (Int): Identifying number of the question
        name (String): Name property

        questionContent (String): Text of the question
        items (Array): Items for a dropdown menu, highest to lowest.
         */
        constructor(props) {
            super(props);
            this.state = {
                input: ""
            };
            this.reportInput = this.reportInput.bind(this);

        }

        reportInput() {
            this.props.reportInput();
        }

        render() {
            let dropdownOptions = this.props.items.map((item, number) =>
                <option value={item.id} id={number} key={number}>{item.content}</option>
            );
            return (
                <div className="itemContainer dropdown" key={this.props.id}>
                    <label htmlFor="">
                        {this.props.questionContent}
                    </label>
                    <br/>
                    <select name={this.props.name}>
                        {dropdownOptions}
                    </select>
                </div>
            )
        }
    }

    class AuditItem extends React.Component {
        /*
        Explanation:
        Audit items are presented as "cards" that hold a one in x chance of getting audited
        Properties:
            probability (Double): any value between 0 and 1 that represents a chance.

         */

        constructor(props) {
            super(props);
            this.state = {
                message: "msg"};

            this.handleClick = this.handleClick.bind(this);

        }

        handleClick(event) {
            event.target.setAttribute("active", true);
            let random = Math.random();
            if (random <= 0.1) {
                console.log("You got audited. Random value: " + random);
                this.props.handleAudit(true);
                this.setState({message: "Audit!"})
            }
            else {
                console.log("No audit for you! Random value: " + random);
                this.props.handleAudit(false);
                this.setState({message: "No Audit!"});
            }
        }

        render() {
            return (
                <div className="flip-container" aria-disabled={this.props.isActive}>
                    <div className="flipper">
                        <div className="auditItem front" onClick={this.handleClick}>
                            <p className="auditItemText">{this.props.id}</p>
                        </div>
                        <div className="auditItem back" onClick={this.handleClick}>
                            Click to Submit!
                        </div>
                    </div>
                </div>

            );
        }
    }

    const domContainer = document.querySelector('#app');
    ReactDOM.render(<Game data={loadedData.content} badges={badges} playerData={players} />, domContainer);
</script>

</body>